// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace scrweb_blazor.Models.EF_Core;

public partial class dbContext : DbContext
{
    public dbContext(DbContextOptions<dbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Aeropuertos> Aeropuertos { get; set; }

    public virtual DbSet<Asegurados> Asegurados { get; set; }

    public virtual DbSet<Bancos> Bancos { get; set; }

    public virtual DbSet<BienesAsegurados> BienesAsegurados { get; set; }

    public virtual DbSet<Ciudades> Ciudades { get; set; }

    public virtual DbSet<Coberturas> Coberturas { get; set; }

    public virtual DbSet<Companias> Companias { get; set; }

    public virtual DbSet<Cuotas> Cuotas { get; set; }

    public virtual DbSet<Documentos> Documentos { get; set; }

    public virtual DbSet<Empresa> Empresa { get; set; }

    public virtual DbSet<Marcas> Marcas { get; set; }

    public virtual DbSet<Modelos> Modelos { get; set; }

    public virtual DbSet<Monedas> Monedas { get; set; }

    public virtual DbSet<Pagos> Pagos { get; set; }

    public virtual DbSet<Paises> Paises { get; set; }

    public virtual DbSet<PlanesCobertura> PlanesCobertura { get; set; }

    public virtual DbSet<PlanesCobertura_Coberturas> PlanesCobertura_Coberturas { get; set; }

    public virtual DbSet<ProcesosUsuarios> ProcesosUsuarios { get; set; }

    public virtual DbSet<Ramos> Ramos { get; set; }

    public virtual DbSet<Remesas> Remesas { get; set; }

    public virtual DbSet<Riesgos> Riesgos { get; set; }

    public virtual DbSet<RiesgosCoberturas> RiesgosCoberturas { get; set; }

    public virtual DbSet<RiesgosCompanias> RiesgosCompanias { get; set; }

    public virtual DbSet<RiesgosDatosAeronave> RiesgosDatosAeronave { get; set; }

    public virtual DbSet<RiesgosProrrata> RiesgosProrrata { get; set; }

    public virtual DbSet<Siniestros> Siniestros { get; set; }

    public virtual DbSet<SiniestrosCoberturas> SiniestrosCoberturas { get; set; }

    public virtual DbSet<SiniestrosMovimientos> SiniestrosMovimientos { get; set; }

    public virtual DbSet<Tipos> Tipos { get; set; }

    public virtual DbSet<Tmp_CuotasCobradasYPagadas_ConsultaCobranzas_Report> Tmp_CuotasCobradasYPagadas_ConsultaCobranzas_Report { get; set; }

    public virtual DbSet<Tmp_Generales_ConsultaEmision_Report> Tmp_Generales_ConsultaEmision_Report { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Aeropuertos>(entity =>
        {
            entity.HasOne(d => d.Ciudad).WithMany(p => p.Aeropuertos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Aeropuertos_Ciudades");
        });

        modelBuilder.Entity<BienesAsegurados>(entity =>
        {
            entity.HasOne(d => d.Ramo).WithMany(p => p.BienesAsegurados).HasConstraintName("FK_BienesAsegurados_Ramos");
        });

        modelBuilder.Entity<Ciudades>(entity =>
        {
            entity.HasOne(d => d.Pais).WithMany(p => p.Ciudades)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ciudades_Paises");
        });

        modelBuilder.Entity<Coberturas>(entity =>
        {
            entity.HasOne(d => d.Ramo).WithMany(p => p.Coberturas).HasConstraintName("FK_Coberturas_Ramos");
        });

        modelBuilder.Entity<Cuotas>(entity =>
        {
            entity.HasOne(d => d.CiaNavigation).WithMany(p => p.Cuotas)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cuotas_Empresa");

            entity.HasOne(d => d.CompaniaNavigation).WithMany(p => p.Cuotas)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cuotas_Companias");

            entity.HasOne(d => d.MonedaNavigation).WithMany(p => p.Cuotas)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cuotas_Monedas");

            entity.HasOne(d => d.Source_Entity).WithMany(p => p.Cuotas).HasConstraintName("FK_Cuotas_Riesgos");
        });

        modelBuilder.Entity<Documentos>(entity =>
        {
            entity.HasOne(d => d.Compania).WithMany(p => p.Documentos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Documentos_Companias");
        });

        modelBuilder.Entity<Empresa>(entity =>
        {
            entity.HasOne(d => d.CompaniaNosotrosNavigation).WithMany(p => p.Empresa).HasConstraintName("FK_Empresa_Companias");
        });

        modelBuilder.Entity<Pagos>(entity =>
        {
            entity.HasOne(d => d.Cuota).WithMany(p => p.Pagos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Pagos_Cuotas");

            entity.HasOne(d => d.Moneda).WithMany(p => p.Pagos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Pagos_Monedas");

            entity.HasOne(d => d.Remesa).WithMany(p => p.Pagos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Pagos_Remesas");
        });

        modelBuilder.Entity<PlanesCobertura>(entity =>
        {
            entity.HasOne(d => d.Moneda).WithMany(p => p.PlanesCobertura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlanesCobertura_Monedas");

            entity.HasOne(d => d.Ramo).WithMany(p => p.PlanesCobertura).HasConstraintName("FK_PlanesCobertura_Ramos");
        });

        modelBuilder.Entity<PlanesCobertura_Coberturas>(entity =>
        {
            entity.HasOne(d => d.Cobertura).WithMany(p => p.PlanesCobertura_Coberturas)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlanesCobertura_Coberturas_Coberturas");

            entity.HasOne(d => d.Moneda).WithMany(p => p.PlanesCobertura_Coberturas).HasConstraintName("FK_PlanesCobertura_Coberturas_Monedas");

            entity.HasOne(d => d.Plan).WithMany(p => p.PlanesCobertura_Coberturas).HasConstraintName("FK_PlanesCobertura_Coberturas_PlanesCobertura");
        });

        modelBuilder.Entity<Remesas>(entity =>
        {
            entity.Property(e => e.MiSu).IsFixedLength();

            entity.HasOne(d => d.CiaNavigation).WithMany(p => p.Remesas)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Remesas_Empresa");

            entity.HasOne(d => d.Compania).WithMany(p => p.Remesas)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Remesas_Companias");

            entity.HasOne(d => d.InstPago_BancoNavigation).WithMany(p => p.Remesas)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Remesas_Bancos");

            entity.HasOne(d => d.Moneda).WithMany(p => p.Remesas)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Remesas_Monedas");
        });

        modelBuilder.Entity<Riesgos>(entity =>
        {
            entity.HasOne(d => d.AseguradoNavigation).WithMany(p => p.Riesgos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Riesgos_Asegurados");

            entity.HasOne(d => d.CedenteNavigation).WithMany(p => p.RiesgosCedenteNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Riesgos_Companias");

            entity.HasOne(d => d.CiaNavigation).WithMany(p => p.Riesgos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Riesgos_Empresa");

            entity.HasOne(d => d.CorredorNavigation).WithMany(p => p.RiesgosCorredorNavigation).HasConstraintName("FK_Riesgos_Companias1");

            entity.HasOne(d => d.MonedaNavigation).WithMany(p => p.Riesgos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Riesgos_Monedas");

            entity.HasOne(d => d.PaisNavigation).WithMany(p => p.Riesgos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Riesgos_Paises");

            entity.HasOne(d => d.RamoNavigation).WithMany(p => p.Riesgos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Riesgos_Ramos");

            entity.HasOne(d => d.TipoNavigation).WithMany(p => p.Riesgos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Riesgos_Tipos");
        });

        modelBuilder.Entity<RiesgosCoberturas>(entity =>
        {
            entity.HasOne(d => d.Cobertura).WithMany(p => p.RiesgosCoberturas)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiesgosCoberturas_Coberturas");

            entity.HasOne(d => d.Moneda).WithMany(p => p.RiesgosCoberturas)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiesgosCoberturas_Monedas");

            entity.HasOne(d => d.Riesgo).WithMany(p => p.RiesgosCoberturas).HasConstraintName("FK_RiesgosCoberturas_Riesgos");
        });

        modelBuilder.Entity<RiesgosCompanias>(entity =>
        {
            entity.HasOne(d => d.Compania).WithMany(p => p.RiesgosCompanias)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiesgosCompanias_Companias");

            entity.HasOne(d => d.Moneda).WithMany(p => p.RiesgosCompanias)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiesgosCompanias_Monedas");

            entity.HasOne(d => d.Riesgo).WithMany(p => p.RiesgosCompanias).HasConstraintName("FK_RiesgosCompanias_Riesgos");
        });

        modelBuilder.Entity<RiesgosDatosAeronave>(entity =>
        {
            entity.HasOne(d => d.Aeropuerto).WithMany(p => p.RiesgosDatosAeronave).HasConstraintName("FK_RiesgosDatosAeronave_Aeropuertos");

            entity.HasOne(d => d.Country).WithMany(p => p.RiesgosDatosAeronave)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiesgosDatosAeronave_Paises");

            entity.HasOne(d => d.MakeNavigation).WithMany(p => p.RiesgosDatosAeronave)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiesgosDatosAeronave_Marcas");

            entity.HasOne(d => d.ModelNavigation).WithMany(p => p.RiesgosDatosAeronave)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiesgosDatosAeronave_Modelos");

            entity.HasOne(d => d.Riesgo).WithMany(p => p.RiesgosDatosAeronave).HasConstraintName("FK_RiesgosDatosAeronave_Riesgos");
        });

        modelBuilder.Entity<RiesgosProrrata>(entity =>
        {
            entity.HasOne(d => d.Compania).WithMany(p => p.RiesgosProrrata)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiesgosProrrata_Companias");

            entity.HasOne(d => d.Moneda).WithMany(p => p.RiesgosProrrata)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiesgosProrrata_Monedas");

            entity.HasOne(d => d.Riesgo).WithMany(p => p.RiesgosProrrata).HasConstraintName("FK_RiesgosProrrata_Riesgos");
        });

        modelBuilder.Entity<Siniestros>(entity =>
        {
            entity.HasOne(d => d.Ajustador).WithMany(p => p.Siniestros).HasConstraintName("FK_Siniestros_Companias");

            entity.HasOne(d => d.Riesgo).WithMany(p => p.Siniestros)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Siniestros_Riesgos");
        });

        modelBuilder.Entity<SiniestrosCoberturas>(entity =>
        {
            entity.HasOne(d => d.Cobertura).WithMany(p => p.SiniestrosCoberturas)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SiniestrosCoberturas_Coberturas");

            entity.HasOne(d => d.Moneda).WithMany(p => p.SiniestrosCoberturas)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SiniestrosCoberturas_Monedas");

            entity.HasOne(d => d.Siniestro).WithMany(p => p.SiniestrosCoberturas).HasConstraintName("FK_SiniestrosCoberturas_Siniestros");
        });

        modelBuilder.Entity<SiniestrosMovimientos>(entity =>
        {
            entity.HasOne(d => d.Cobertura).WithMany(p => p.SiniestrosMovimientos).HasConstraintName("FK_SiniestrosMovimientos_Coberturas");

            entity.HasOne(d => d.Moneda).WithMany(p => p.SiniestrosMovimientos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SiniestrosMovimientos_Monedas");

            entity.HasOne(d => d.Siniestro).WithMany(p => p.SiniestrosMovimientos).HasConstraintName("FK_SiniestrosMovimientos_Siniestros");
        });

        modelBuilder.Entity<Tmp_CuotasCobradasYPagadas_ConsultaCobranzas_Report>(entity =>
        {
            entity.HasOne(d => d.Proceso).WithMany(p => p.Tmp_CuotasCobradasYPagadas_ConsultaCobranzas_Report).HasConstraintName("FK_Tmp_CuotasCobradasYPagadas_ConsultaCobranzas_Report_ProcesosUsuarios");
        });

        modelBuilder.Entity<Tmp_Generales_ConsultaEmision_Report>(entity =>
        {
            entity.HasOne(d => d.Proceso).WithMany(p => p.Tmp_Generales_ConsultaEmision_Report).HasConstraintName("FK_Tmp_Generales_ConsultaEmision_Report_ProcesosUsuarios");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}